// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { GetUsersData, PostUsersData, DeleteUsersByIdData, GetUsersByIdData, PatchUsersByIdData, GetUsersByIdAddressesData, PostUsersByIdAddressesData, DeleteUsersByIdAddressesByAddressIdData, GetUsersByIdAddressesByAddressIdData, PutUsersByIdAddressesByAddressIdData, GetTemplatesData, PostTemplatesData, DeleteTemplatesByIdData, GetTemplatesByIdData, PatchTemplatesByIdData } from './types.gen';

export const client = createClient(createConfig());

/**
 * Retrieve a paginated list of users.
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Create a new user.
 */
export const postUsers = <ThrowOnError extends boolean = false>(options?: Options<PostUsersData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Delete a user by id.
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(options?: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Retrieve a user by id.
 */
export const getUsersById = <ThrowOnError extends boolean = false>(options?: Options<GetUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update user fields by id.
 */
export const patchUsersById = <ThrowOnError extends boolean = false>(options?: Options<PatchUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<unknown, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Retrieve a user's addresses.
 */
export const getUsersByIdAddresses = <ThrowOnError extends boolean = false>(options?: Options<GetUsersByIdAddressesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/users/{id}/addresses',
        ...options
    });
};

/**
 * Add a new address for a user.
 */
export const postUsersByIdAddresses = <ThrowOnError extends boolean = false>(options?: Options<PostUsersByIdAddressesData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/users/{id}/addresses',
        ...options
    });
};

/**
 * Delete user address fields by id and address_id.
 */
export const deleteUsersByIdAddressesByAddressId = <ThrowOnError extends boolean = false>(options?: Options<DeleteUsersByIdAddressesByAddressIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        url: '/users/{id}/addresses/{address_id}',
        ...options
    });
};

/**
 * Retrieve a user's address.
 */
export const getUsersByIdAddressesByAddressId = <ThrowOnError extends boolean = false>(options?: Options<GetUsersByIdAddressesByAddressIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/users/{id}/addresses/{address_id}',
        ...options
    });
};

/**
 * Update user address fields by id and address_id.
 */
export const putUsersByIdAddressesByAddressId = <ThrowOnError extends boolean = false>(options?: Options<PutUsersByIdAddressesByAddressIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        url: '/users/{id}/addresses/{address_id}',
        ...options
    });
};

/**
 * Retrieve a non paginated list of templates.
 */
export const getTemplates = <ThrowOnError extends boolean = false>(options?: Options<GetTemplatesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/templates',
        ...options
    });
};

/**
 * Create a new template.
 */
export const postTemplates = <ThrowOnError extends boolean = false>(options?: Options<PostTemplatesData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/templates',
        ...options
    });
};

/**
 * Delete template by id.
 */
export const deleteTemplatesById = <ThrowOnError extends boolean = false>(options?: Options<DeleteTemplatesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        url: '/templates/{id}',
        ...options
    });
};

/**
 * Retrieve template by id.
 */
export const getTemplatesById = <ThrowOnError extends boolean = false>(options?: Options<GetTemplatesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/templates/{id}',
        ...options
    });
};

/**
 * Update template by id.
 */
export const patchTemplatesById = <ThrowOnError extends boolean = false>(options?: Options<PatchTemplatesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<unknown, unknown, ThrowOnError>({
        url: '/templates/{id}',
        ...options
    });
};