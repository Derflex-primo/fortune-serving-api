// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { GetUsersData, PostUsersData, DeleteUsersByIdData, GetUsersByIdData, PatchUsersByIdData, GetUsersByIdAddressesData, PostUsersByIdAddressesData } from './types.gen';

export const client = createClient(createConfig());

/**
 * Retrieve a paginated list of users.
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Create a new user.
 */
export const postUsers = <ThrowOnError extends boolean = false>(options?: Options<PostUsersData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Delete a user by ID.
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(options?: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Retrieve a user by ID.
 */
export const getUsersById = <ThrowOnError extends boolean = false>(options?: Options<GetUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update user fields by ID.
 */
export const patchUsersById = <ThrowOnError extends boolean = false>(options?: Options<PatchUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<unknown, unknown, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Retrieve a user's addresses.
 */
export const getUsersByIdAddresses = <ThrowOnError extends boolean = false>(options?: Options<GetUsersByIdAddressesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/users/{id}/addresses',
        ...options
    });
};

/**
 * Add a new address for a user.
 */
export const postUsersByIdAddresses = <ThrowOnError extends boolean = false>(options?: Options<PostUsersByIdAddressesData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/users/{id}/addresses',
        ...options
    });
};